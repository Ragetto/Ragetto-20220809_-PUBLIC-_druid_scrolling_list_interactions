---========================---
---== LUA MODULE IMPORTS ==---
---========================---
local debugdraw = require "extensions.defold.debug-draw.debug-draw"
local defmath = require "extensions.defold.defmath.defmath"
local lume = require "extensions.external.lume.lume"
local gui_extra = require "extensions.defold.gui_extra.gui_extra"
local monarch = require "extensions.defold.monarch.monarch"
local rc = require "extensions.defold.rendercam.rendercam"
local csv = require "extensions.defold.csv-importer.csv-importer"
local gp = require "gamedata.runtime_values"

local druid = require "druid.druid"
local my_style = require("gui.druid_styles.style_1")

local btn_prefab, btn_frame, btn_frame_anim, btn_text, btn_icon = "prefab", "frame", "btn_medium_", "text", "icon"
local scrolling_list_container, scrolling_list_content = "data_list_vertical", "data_list_vertical_content"
local list_nb_items_max, nb_sprites_max, data_list_nb_columns = 30, 10, 3


local function ultra_basic_callback()
	print("ultra basic callback!")
end

local function create_scrolling_list(self, data, index, data_list)
	-- In data list create funtion we made all init stuff for this node
	local nodes = gui.clone_tree(self.prefab)
	local root = nodes[btn_prefab]
	gui.set_enabled(root, true)
	gui.set_text(nodes[btn_text], "Item " .. data.id)

	-- Since we have only 1 component, we can return this one
	-- If we have several components, we should create custom component to
	-- union them all
	local button = self.druid:new_button(root, function()
		--data.is_checked = not data.is_checked
		--gui.set_enabled(nodes["checkbox"], data.is_checked)
		data[data.id].btn_prefab = instance[btn_prefab]
		data[data.id].btn_frame = instance[btn_frame]
		data[data.id].btn_icon = instance[btn_icon]
		data[data.id].btn_text = instance[btn_text]
		data[data.id].screen_pos = vmath.vector3()
		data[data.id].state = 1 -- 0: locked / 1: unlocked / 2: selected
	end)
	button:set_click_zone(data_list.scroll.view_node)

	-- We should return in this function root node and optionally - Druid component
	return root, button
end


---========================---
---========================---

function init(self)
	self.druid = druid.new(self)

	self.prefab = gui.get_node(btn_prefab)
	gui.set_enabled(self.prefab, false)

	local data = {}

	for i = 1, list_nb_items_max do
		table.insert(data, {
			id = i,
			btn_prefab = nil,
			btn_frame = nil,
			btn_icon = nil,
			btn_text = nil,
			screen_pos = vmath.vector3(),
			state = 1 -- 0: locked / 1: unlocked / 2: selected
		})
	end

	self.scroll = self.druid:new_scroll(scrolling_list_container, scrolling_list_content)
	self.scroll:set_horizontal_scroll(false)
	self.grid = self.druid:new_static_grid(scrolling_list_content, btn_prefab, data_list_nb_columns)

	-- Pass already created scroll and grid components to data_list:
	self.data_list = self.druid:new_data_list(self.scroll, self.grid, create_scrolling_list)

	self.data_list:set_data(data)

	for i=1,#data do
		print(data[i].id.." ==> "..tostring(data[i].btn_prefab).." / "..tostring(data[i].screen_pos))
	end
	
end -- of init function


function final(self)
	self.druid:final()
end -- of final function


function update(self, dt)
	self.druid:update(dt)
	
	
	-------================================
	----====== DEBUG
	-------================================

	
end -- of update function


function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end -- of on_message function


function on_input(self, action_id, action)

	return self.druid:on_input(action_id, action)
	
end -- of on_input function